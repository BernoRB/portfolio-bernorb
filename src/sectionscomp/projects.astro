---
import ExternalLink from "../icons/external-links.astro";
import CardContent from "./ui/card/card-content.astro";
import Card from "./ui/card/card.astro";
const projects = [
 {
    title: "Sistema de Procesamiento de Datos de Mercado en Tiempo Real",
    description:
      "Arquitectura de microservicios para recolección y procesamiento de datos bursátiles en tiempo real. Incluye Stock Collector (Node.js) que obtiene datos de Yahoo Finance API, Data Processor (Node.js) que consume mensajes de Kafka, y almacenamiento en PostgreSQL. Implementa comunicación asíncrona mediante Apache Kafka, visualización con Grafana, y toda la infra dockerizada.",
    tech: ["NodeJS", "TypeScript", "Kafka", "PostgreSQL", "Grafana", "Docker", "Microservices"],
    links: [
      {
        text: "Ver código",
        url: "https://github.com/BernoRB/realtime-stock-kafka"
      }
    ]
  },
  {
    title: "Sistema de Procesamiento de Imágenes en la Nube",
    description:
      "Arquitectura de microservicios para procesamiento asíncrono de imágenes en AWS. Incluye Upload Service (NestJS), Processing Service (Node+Express), y funciones Lambda. Implementa comunicación asíncrona mediante colas SQS, almacenamiento en S3 y DynamoDB. Infraestructura definida como código con Terraform y despliegue automatizado con GitHub Actions.",
    tech: ["NodeJS", "NestJS", "TypeScript", "AWS", "Terraform", "Docker", "IaC", "Microservices"],
    links: [
      {
        text: "Ver código",
        url: "https://github.com/bernorb/projx-img-processing"
      }
    ]
  },
  {
  title: "CSV Transactions Analyzer",
  description:
    "Simple analizador de transacciones CSV que detecta actividad sospechosa y agrupa datos por usuario. Backend construido con Python+FastAPI. Frontend simple con Vue.js que permite carga de archivos y descarga automática de resultados procesados.",
  tech: ["Python", "FastAPI", "Vue.js"],
  links: [
    {
      text: "Ver código",
      url: "https://github.com/BernoRB/python-csv-analyzer"
    }
  ]
  },
  {
    title: "API Bancaria",
    description:
      "Aplicación backend construida con NestJS y PostgreSQL que simula operaciones bancarias básicas. Implementa autenticación JWT, gestión de usuarios, depósitos, transferencias y un sistema de límites operacionales configurable. Pruebas unitarias completas y documentación API con Swagger.",
    tech: ["NestJS", "NodeJS", "PostgreSQL", "JWT"],
    links: [
      {
        text: "Ver código",
        url: "https://github.com/BernoRB/simple-banking-project"
      }
    ]
  },
  {
    title: "Portfolio",
    description: "Este mismo portfolio/cv web en el que estamos. Construido con Astro web framework.",
    tech: ["Astro", "Tailwind CSS"],
    links: [
      {
        text: "Ver código",
        url: "https://github.com/BernoRB/portfolio-bernorb"
      }
    ]
  },
  // {
  //   title: "Proyecto n3",
  //   description: "Cada proyecto mejor que el anterior",
  //   tech: ["Kotlin", "Android"],
  //   links: [
  //     {
  //       text: "Ver código",
  //       url: "#"
  //     }
  //   ]
  // },
  // {
];
const techColors = {
  NestJS: '#0DDBFF',
  NodeJS: '#42b883',
  Kotlin: '#e0234e',
  PostgreSQL: '#336791',
  JWT: '#000000',
  Astro: '#FF5D01',
  'Tailwind CSS': '#38B2AC',
  'Vue.js': '#4FC08D',
  Android: '#3DDC84',
  TypeScript: '#3178C6',
  AWS: '#FF9900',
  Terraform: '#7B42BC',
  Docker: '#2496ED',
  IaC: '#326CE5',
  Microservices: '#FF6B6B',
  Kafka: '#231F20',
  Grafana: '#F46800',
  Python: '#3776AB',
  FastAPI: '#009688',
};
---
<h2 class="text-xl font-bold mb-4">Proyectos Personales</h2>
<div class="grid grid-cols-1 gap-4 mb-6">
  {
    projects.map((p, i) => (
      <Card key={i}>
        <CardContent className="pt-6 h-full">
          <div class="flex flex-col h-full">
            <a href={p.links[0].url} target="_blank" rel="noopener noreferrer" class="font-semibold text-primary hover:underline">
              {p.title}
            </a>
            <p class="text-sm text-muted-foreground mt-1 mb-4 text-justify">
              {p.description}
            </p>
            <div class="mt-auto flex justify-between">
              {/* Lista de tecnologías a la izquierda */}
              <div class="flex flex-wrap gap-3">
                {p.tech.map(tech => (
                  <div class="flex items-center space-x-2">
                    <div
                      class:list={['size-4 rounded-full border border-white/10']}
                      style={`background-color: ${techColors[tech as keyof typeof techColors] || '#888888'}`}
                    />
                    <span class="text-xs font-medium text-muted-foreground">
                      {tech}
                    </span>
                  </div>
                ))}
              </div>
             
              {/* Enlaces a la derecha */}
              <div class="flex flex-col gap-2 items-end">
                {p.links.map(link => (
                  <a
                    href={link.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="flex items-center gap-2 text-sm text-primary hover:underline"
                  >
                    {link.text}
                    <ExternalLink class="inline-block size-3" />
                  </a>
                ))}
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    ))
  }
</div>